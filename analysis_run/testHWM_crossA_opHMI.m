% Copyright (C) 2019 Andreas Bertsatos <andreas.bertsatos@gmail.com>
%
% This program is free software; you can redistribute it and/or modify it under
% the terms of the GNU General Public License as published by the Free Software
% Foundation; either version 3 of the License, or (at your option) any later
% version.
%
% This program is distributed in the hope that it will be useful, but WITHOUT
% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
% FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
% details.
%
% You should have received a copy of the GNU General Public License along with
% this program; if not, see <http://www.gnu.org/licenses/>.

% this script utilizes the opHMI.py script to iteratively train and test SVM models, and further
% cross-validate them on an independent sample with the height map images from the occipital
% protuberance area, generated with the skullanalyzer software
clear
iterations = 100

% create a unified list from all available occipital protuberance HMI files
ABH = dir("../HMI/ABH*occipital*");
WLH = dir("../HMI/WLH*occipital*");
MOTOL = dir("../HMI/MOTOL*occipital*");
HOMOL = dir("../HMI/HOMOL*occipital*");


% for each sublist create a unified appropriate filename and label list
sex = csvread("GR_sex.txt");
for i=1:length(ABH)
	sample_id = str2num(ABH(i).name([4:6]));
	Cross_labels(i,:) = sex(sex(:,1)==sample_id,:);
	Cross_files(i).name = ABH(i).name;
end
for j=1:length(WLH)
	sample_id = str2num(WLH(j).name([4:6]));
	label(j,:) = sex(sex(:,1)==sample_id,:);
	files(j).name = WLH(j).name;
end
sex = csvread("MOTOL_sex.txt");
for k=1:length(MOTOL)
	sample_id = str2num(MOTOL(k).name([6:8]));
	label(j+k,:) = sex(sex(:,1)==sample_id,:);
	files(j+k).name = MOTOL(k).name;
end
sex = csvread("HOMOLKA_sex.txt");
for l=1:length(HOMOL)
	sample_id = str2num(HOMOL(l).name([6:8]));
	label(j+k+l,:) = sex(sex(:,1)==sample_id,:);
	files(j+k+l).name = HOMOL(l).name;
end

% define result matrices and resize them appropriately for a given number of iterations
ABH_results = Cross_labels;
WLH_results = label([1:j],:);
MOTOL_results = label([j+1:j+k],:);
HOMOLKA_results = label([j+k+1:j+k+l],:);

ABH_results(:,end+1:iterations+2)=NaN;
WLH_results(:,end+1:iterations+2)=NaN;
MOTOL_results(:,end+1:iterations+2)=NaN;
HOMOLKA_results(:,end+1:iterations+2)=NaN;

% define ranges of training-testing sample
t_sample = j+k+l;

% create a copy for each ABH file into the cross-validation folder, while
% renaming each file according the its index on the respective list
for i = 1:length(Cross_files)
	old_name = Cross_files(i).name;
	new_name = ["Cross" sprintf("%03d", i) "opHMI.csv"];
	cmd_line = ["cp ../HMI/" old_name " " new_name];
	unix(cmd_line);
	cmd_line = ["mv " new_name " ./HMI_cross/"];
	unix(cmd_line);
	Cross_label(i,:) = [i, Cross_labels(i,:)];
endfor
csvwrite("./HMI_cross/cross_labels.csv", Cross_label(:,[1,3]));

% for a given number of iterations
for iter = 1:iterations
	% randomly divide data into training and testing subsets
	idx = randperm(t_sample);
	for i=1:161
		Train_files(i).name = files(idx(i)).name;
	endfor
	Train_labels = label(idx([1:161]),:);
	for i=162:t_sample
		Test_files(i-161).name = files(idx(i)).name;
	endfor
	Test_labels = label(idx([162:t_sample]),:);

	% create a copy for each file into the training and testing folders respectively, while
	% renaming each file according the its index on the respective list
	for i=1:length(Train_files)
		old_name = Train_files(i).name;
		new_name = ["Train" sprintf("%03d", i) "opHMI.csv"];
		cmd_line = ["cp ../HMI/" old_name " " new_name];
		unix(cmd_line);
		cmd_line = ["mv " new_name " ./HMI_train/"];
		unix(cmd_line);
		Train_label(i,:) = [i, Train_labels(i,:)];
	endfor
	csvwrite("./HMI_train/train_labels.csv", Train_label(:,[1,3]));
	for i=1:length(Test_files)
		old_name = Test_files(i).name;
		new_name = ["Test" sprintf("%03d", i) "opHMI.csv"];
		cmd_line = ["cp ../HMI/" old_name " " new_name];
		unix(cmd_line);
		cmd_line = ["mv " new_name " ./HMI_test/"];
		unix(cmd_line);
		Test_label(i,:) = [i, Test_labels(i,:)];
	endfor
	csvwrite("./HMI_test/test_labels.csv", Test_label(:,[1,3]));

	% run python script for SVM classification
	unix("python3 opHMI.py");
	% delete autogenerated training and testing files from HMI_ folders
	unix("rm ./HMI_train/*");
	unix("rm ./HMI_test/*");
	% read test_classification.csv output file from opHMI.py script
	results = csvread("test_classification.csv");
	% delete test_classification.csv file
	unix("rm test_classification.csv");
	
	% save the results of .decision_function method for each testing sample according
	% to the index crossreferenced back to the original samples
	cor_pred = zeros(1,15);
	unclass = zeros(1,15);
	test_samples = length(Test_files);
	for i=1:test_samples
		df = results(find(results(:,1)==i),2);
		f_initials = Test_files(i).name([1:3]);
		if(f_initials == "HOM")
			f_number = str2num(Test_files(i).name([6:8]));
			HOMOLKA_results(HOMOLKA_results(:,1)==f_number,2+iter) = df;
		endif
		if(f_initials == "WLH")
			f_number = str2num(Test_files(i).name([4:6]));
			WLH_results(WLH_results(:,1)==f_number,2+iter) = df;
		endif
		if(f_initials == "MOT")
			f_number = str2num(Test_files(i).name([6:8]));
			MOTOL_results(MOTOL_results(:,1)==f_number,2+iter) = df;
		endif
		% check if sample was corectly classified and append the results on a new matrix
		s = results(find(results(:,1)==i),3);
		% for cut off point ranging from 0 to +-1.4 at 0.1 intervals
		for q=0:14
			cop = q / 10;
			if((s==2 && df>cop) || (s==1 && df<-cop))
				cor_pred(q+1) += 1;
			elseif((s==2 && df<cop && df>-cop) || (s==1 && df<cop && df>-cop))
				unclass(q+1) += 1;
			endif
			index(q+1) = cop;
		endfor
	endfor
	classification(iter).test_class = [cor_pred./(ones(1,15)*test_samples-unclass); unclass./test_samples];
	classification(iter).train_files = Train_files;
	classification(iter).train_labels = Train_labels;
	classification(iter).test_files = Test_files;
	classification(iter).test_labels = Test_labels;
	
	% read cross_classification.csv output file from mpInfHMI.py script
	results = csvread("cross_classification.csv");
	% delete cross_classification.csv file
	unix("rm cross_classification.csv");
	% save the results of .decision_function method for each cross-validation sample according
	% to the index crossreferenced back to the original samples
	cor_pred = zeros(1,15);
	unclass = zeros(1,15);
	cross_samples = length(Cross_files);
	for i=1:cross_samples
		df = results(find(results(:,1)==i),2);
		f_initials = Cross_files(i).name([1:3]);
		if(f_initials == "ABH")
			f_number = str2num(Cross_files(i).name([4:6]));
			ABH_results(ABH_results(:,1)==f_number,2+iter) = df;
		endif
		% check if sample was corectly classified and append the results on a new matrix
		s = results(find(results(:,1)==i),3);
		% for cut off point ranging from 0 to +-1.4 at 0.1 intervals
		for q=0:14
			cop = q / 10;
			if((s==2 && df>cop) || (s==1 && df<-cop))
				cor_pred(q+1) += 1;
			elseif((s==2 && df<cop && df>-cop) || (s==1 && df<cop && df>-cop))
				unclass(q+1) += 1;
			endif
			index(q+1) = cop;
		endfor
	endfor
	classification(iter).cross_class = [cor_pred./(ones(1,15)*cross_samples-unclass); unclass./cross_samples];
	classification(iter).cross_files = Cross_files;
	classification(iter).cross_labels = Cross_labels;
	
	% read trained model attributes and save them to classification structure
	model = csvread("trainedmodel.csv");
	classification(iter).dual_coef = model(1:end-1,1);
	classification(iter).support_vector = model(1:end-1,2:end);
	classification(iter).rho_intercept = model(end,1);
	classification(iter).gamma_param = model(end,2);
	% delete trained model csv file
	unix("rm trainedmodel.csv");
endfor
% delete autogenerated cross-validation files from respective HMI folder
unix("rm ./HMI_cross/*");
% merge results matrix
output = [ABH_results;WLH_results;MOTOL_results;HOMOLKA_results];
% save results to files
csvwrite("op_results.csv", output);
save("op_classification.mat", "classification" );
